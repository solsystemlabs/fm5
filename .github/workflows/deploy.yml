name: Deploy to Cloudflare Workers

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  test:
    name: Test and Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format -- --check

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Prepare test database
        run: npm run test:prepare
        env:
          CI: true
          DATABASE_URL: ${{ secrets.XATA_TEST_DATABASE_URL }}

      - name: Run tests
        run: npm run test
        env:
          CI: true
          XATA_TEST_DATABASE_URL: ${{ secrets.XATA_TEST_DATABASE_URL }}

      - name: Run security audit
        run: npm audit --audit-level high

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Cloudflare Workers (Staging)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          environment: staging
          secrets: |
            JWT_SECRET
            BETTER_AUTH_SECRET
            DATABASE_URL
            SHADOW_DATABASE_URL
            RESEND_API_KEY
        env:
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          BETTER_AUTH_SECRET: ${{ secrets.STAGING_BETTER_AUTH_SECRET }}
          DATABASE_URL: ${{ secrets.STAGING_XATA_DATABASE_URL }}
          SHADOW_DATABASE_URL: ${{ secrets.STAGING_XATA_SHADOW_DATABASE_URL }}
          RESEND_API_KEY: ${{ secrets.STAGING_RESEND_API_KEY }}

      - name: Run staging health check
        run: |
          sleep 30
          curl -f https://fm5-staging.solsystemlabs.com/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, deploy-staging]
    if: github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Cloudflare Workers (Production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          environment: production
          secrets: |
            JWT_SECRET
            BETTER_AUTH_SECRET
            DATABASE_URL
            SHADOW_DATABASE_URL
            RESEND_API_KEY
        env:
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          BETTER_AUTH_SECRET: ${{ secrets.PRODUCTION_BETTER_AUTH_SECRET }}
          DATABASE_URL: ${{ secrets.PRODUCTION_XATA_DATABASE_URL }}
          SHADOW_DATABASE_URL: ${{ secrets.PRODUCTION_XATA_SHADOW_DATABASE_URL }}
          RESEND_API_KEY: ${{ secrets.PRODUCTION_RESEND_API_KEY }}

      - name: Run production health check
        run: |
          sleep 30
          curl -f https://fm5.solsystemlabs.com/health || exit 1

      - name: Create deployment tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a "production-$(date +%Y%m%d-%H%M%S)" -m "Production deployment $(date)"
