// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum CategoryEnum {
  keychain
  earring
  decoration
  functional
}

enum MaterialTypeEnum {
  PLA
  PETG
  ABS
  TPU
}

enum JobStatusEnum {
  queued
  printing
  completed
  failed
}

// Users table (authentication and profile)
model User {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email               String   @unique @db.VarChar(255)
  name                String   @db.VarChar(255)
  businessName        String?  @map("business_name") @db.VarChar(255)
  businessDescription String?  @map("business_description") @db.Text
  preferences         Json     @default("{}")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime @updatedAt @map("updated_at") @db.Timestamptz
  lastLoginAt         DateTime? @map("last_login_at") @db.Timestamptz

  // Relationships
  models             Model[]
  modelVariants      ModelVariant[]
  filaments          Filament[]
  filamentInventory  FilamentInventory[]
  printJobs          PrintJob[]

  @@map("users")
}

// Models table (user-isolated)
model Model {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  name        String      @db.VarChar(255)
  designer    String      @db.VarChar(255)
  description String?     @db.Text
  imageUrls   String[]    @map("image_urls") @db.Text
  category    CategoryEnum
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  variants  ModelVariant[]

  @@map("models")
  @@index([userId])
}

// Model variants table with hybrid approach (user-isolated)
model ModelVariant {
  id                     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                 String   @map("user_id") @db.Uuid
  modelId                String   @map("model_id") @db.Uuid
  name                   String   @db.VarChar(255)
  version                Int      @default(1)
  slicedFileUrl          String   @map("sliced_file_url") @db.Text

  // Fast-access structured fields for common queries
  layerHeight            Decimal  @map("layer_height") @db.Decimal(4, 2)
  nozzleTemperature      Int      @map("nozzle_temperature")
  bedTemperature         Int      @map("bed_temperature")
  printDurationMinutes   Int      @map("print_duration_minutes")

  // Complete Bambu Studio metadata in JSONB
  bambuMetadata          Json     @map("bambu_metadata")

  // Business metrics
  costToProduceUsd       Decimal  @default(0) @map("cost_to_produce_usd") @db.Decimal(10, 2)
  successRatePercentage  Decimal  @default(0) @map("success_rate_percentage") @db.Decimal(5, 2)

  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  model                  Model                  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  filamentRequirements   FilamentRequirement[]
  printJobs              PrintJob[]

  @@unique([modelId, version])
  @@map("model_variants")
  @@index([userId])
  @@index([modelId])
  @@index([layerHeight])
  @@index([printDurationMinutes])
}

// Filament specifications (separate from inventory, user-isolated)
model Filament {
  id             String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId         String            @map("user_id") @db.Uuid
  brand          String            @db.VarChar(100)
  materialType   MaterialTypeEnum  @map("material_type")
  colorName      String            @map("color_name") @db.VarChar(100)
  colorHex       String            @map("color_hex") @db.Char(7)
  costPerGramBase Decimal          @map("cost_per_gram_base") @db.Decimal(8, 4)
  purchaseUrl    String?           @map("purchase_url") @db.Text
  demandCount    Int               @default(0) @map("demand_count")
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime          @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory              FilamentInventory[]
  filamentRequirements   FilamentRequirement[]

  @@unique([userId, brand, materialType, colorHex])
  @@map("filaments")
  @@index([userId])
  @@index([materialType, colorHex])
  @@index([demandCount(sort: Desc)])
}

// Physical filament inventory (actual spools, user-isolated)
model FilamentInventory {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId             String    @map("user_id") @db.Uuid
  filamentId         String    @map("filament_id") @db.Uuid
  batchIdentifier    String?   @map("batch_identifier") @db.VarChar(100)
  quantityGrams      Int       @default(0) @map("quantity_grams")
  actualCostPerGram  Decimal   @map("actual_cost_per_gram") @db.Decimal(8, 4)
  lowStockThreshold  Int       @default(100) @map("low_stock_threshold")
  purchaseDate       DateTime? @map("purchase_date") @db.Date
  expiryDate         DateTime? @map("expiry_date") @db.Date
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz
  lastUpdated        DateTime  @updatedAt @map("last_updated") @db.Timestamptz

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  filament Filament @relation(fields: [filamentId], references: [id], onDelete: Cascade)

  @@map("filament_inventory")
  @@index([userId])
  @@index([filamentId])
  @@index([quantityGrams, lowStockThreshold])
}

// Filament requirements (links variants to filaments)
model FilamentRequirement {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  variantId     String   @map("variant_id") @db.Uuid
  filamentId    String   @map("filament_id") @db.Uuid
  amsSlot       Int      @map("ams_slot")
  usageModel    Int      @default(0) @map("usage_model")
  usageWaste    Int      @default(0) @map("usage_waste")
  usagePurge    Int      @default(0) @map("usage_purge")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relationships
  variant  ModelVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  filament Filament     @relation(fields: [filamentId], references: [id], onDelete: Cascade)

  @@unique([variantId, amsSlot])
  @@map("filament_requirements")
  @@index([variantId])
  @@index([filamentId])
}

// Print jobs/queue table (user-isolated)
model PrintJob {
  id                       String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                   String        @map("user_id") @db.Uuid
  variantId                String        @map("variant_id") @db.Uuid
  status                   JobStatusEnum @default(queued)
  priority                 Int           @default(0)
  estimatedStartTime       DateTime?     @map("estimated_start_time") @db.Timestamptz
  estimatedCompletionTime  DateTime?     @map("estimated_completion_time") @db.Timestamptz
  actualCompletionTime     DateTime?     @map("actual_completion_time") @db.Timestamptz
  failureReason            String?       @map("failure_reason") @db.Text
  completionPercentage     Int?          @map("completion_percentage")
  createdAt                DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt                DateTime      @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant ModelVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("print_jobs")
  @@index([userId])
  @@index([status])
  @@index([priority(sort: Desc)])
  @@index([status, priority(sort: Desc), createdAt])
}