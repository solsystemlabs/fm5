name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        default: ''

jobs:
  validate-input:
    name: Validate Deployment Confirmation
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "DEPLOY" ]; then
            echo "❌ Production deployment cancelled: confirmation not provided"
            exit 1
          fi
          echo "✅ Production deployment confirmed"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate-input
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and Deploy to Cloudflare Workers (Production)
        run: npm run deploy:production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Set Cloudflare secrets
        run: |
          echo "${{ secrets.PRODUCTION_JWT_SECRET }}" | npx wrangler secret put JWT_SECRET --env production
          echo "${{ secrets.PRODUCTION_BETTER_AUTH_SECRET }}" | npx wrangler secret put BETTER_AUTH_SECRET --env production
          echo "${{ secrets.PRODUCTION_XATA_DATABASE_URL }}" | npx wrangler secret put DATABASE_URL --env production
          echo "${{ secrets.PRODUCTION_XATA_SHADOW_DATABASE_URL }}" | npx wrangler secret put SHADOW_DATABASE_URL --env production
          echo "${{ secrets.PRODUCTION_RESEND_API_KEY }}" | npx wrangler secret put RESEND_API_KEY --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Wait for deployment
        run: sleep 30

      - name: Run production health check
        run: |
          curl -f https://fm5.solsystemlabs.com/health || exit 1

      - name: Create deployment tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          DEPLOY_TAG="production-$(date +%Y%m%d-%H%M%S)"
          git tag -a "$DEPLOY_TAG" -m "Production deployment $(date)"
          git push origin "$DEPLOY_TAG"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful"
          echo "URL: https://fm5.solsystemlabs.com"
          echo "Tag: production-$(date +%Y%m%d-%H%M%S)"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed"
          echo "Use 'wrangler rollback' to revert if needed"
          echo "See rollback documentation in docs/deployment/rollback-procedures.md"
